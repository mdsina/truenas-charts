name: "Containers: Test-and-Build"

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'images/**'
    - ".github/workflows/containers.build.yaml"
  pull_request:
    paths:
    - 'images/**'
    - ".github/workflows/containers.build.yaml"

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'images/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  build:
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

    # Define if tests and push should be run against which versions/platforms
    - name: Prepare
      id: prep
      run: |
        if test -f "./images/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="images"
          echo ::set-output name=category::${CATEGORY}
          VERSION="$(head -1 ./${CATEGORY}/${{ matrix.container }}/Dockerfile |  cut -d'@' -f1 | sed 's/^FROM.*://' )"
          VERSION=$(echo $VERSION | sed "s/latest-//g")
          VERSION=$(echo $VERSION | sed "s/stable-//g")
          VERSION=$(echo $VERSION | sed "s/edge-//g")
          VERSION=$(echo $VERSION | sed "s/cpu-//g")
          VERSION=$(echo $VERSION | sed "s/gpu-//g")
          VERSION=$(echo $VERSION | sed "s/release-//g")
          VERSION=$(echo $VERSION | sed "s/release_//g")
          VERSION=$(echo $VERSION | sed "s/version-//g")
          VERSION=$(echo $VERSION | sed "s/version_//g")
          VERSION=$(echo $VERSION | sed "s/apache-//g")
          VERSION=$(echo $VERSION | sed "s/ubuntu-//g")
          VERSION=$(echo $VERSION | sed "s/focal-//g")
          VERSION=$(echo $VERSION | sed "s/fpm-//g")
          VERSION=$(echo $VERSION | sed "s/vaapi-//g")
          VERSION=$(echo $VERSION | sed "s/cuda-//g")
          VERSION=$(echo $VERSION | sed "s/-centos7//g")
          VERSION=$(echo $VERSION | sed "s/java[0-9]*-//g")
          VERSION="${VERSION#*V.}"
          VERSION="${VERSION#*v.}"
          VERSION="${VERSION#*v-}"
          VERSION="${VERSION#*v}"
          VERSION="${VERSION%-*}"
          if (echo "$VERSION" | grep -Pq "^\d+\.\d+$"); then
            VERSION="${VERSION}.0"
          fi;
        else
          CATEGORY="base"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION) || VERSION="$(head -1 ./${CATEGORY}/${{ matrix.container }}/Dockerfile |  cut -d'@' -f1 | sed 's/^FROM.*://' )"
          VERSION=$(echo $VERSION | sed "s/latest-//g")
          VERSION=$(echo $VERSION | sed "s/stable-//g")
          VERSION="${VERSION#*V.}"
          VERSION="${VERSION#*v.}"
          VERSION="${VERSION#*v-}"
          VERSION="${VERSION#*v}"
          VERSION="${VERSION%-*}"
          if (echo "$VERSION" | grep -Pq "^\d+\.\d+$"); then
            VERSION="${VERSION}.0"
          fi;
        fi
        echo ::set-output name=category::${CATEGORY}
        echo ::set-output name=version::${VERSION}
        PLATFORM="linux/amd64"
        echo ::set-output name=platform::${PLATFORM}

        if [ "${{github.event_name}}" == "pull_request" ]; then
          echo ::set-output name=push::false
        else
          echo ::set-output name=push::true
        fi

    - name: Get Time
      id: time
      uses: nanzm/get-time-action@887e4db9af58ebae64998b7105921b816af77977 # v2.0
      with:
        timeZone: 1
        format: 'YYYYMMDDHHmmss'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
      with:
        platforms: amd64

    - uses: sigstore/cosign-installer@main

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@78fc58e266e87a38d4194b2137a3d4e9bcaf7ca1 # v0.14.3

    - name: Login to Gitea
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
      if: github.event_name != 'pull_request'
      with:
        registry: gitea.mds.name
        username: ${{ secrets.GITEA_USER }}
        password: ${{ secrets.GITEA_SECRET }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          gitea.mds.name/mds/truenas/${{ matrix.container }}

    # Install and configure Buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:latest

    # Push if not a PR, otherwise just test the build process for all requested platforms
    - name: Build and Push
      id: push
      uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
      with:
        build-args: |
          VERSION=${{ steps.prep.outputs.version }}
          CONTAINER_NAME=${{ matrix.container }}
          CONTAINER_VER=${{ steps.prep.outputs.version }}
        context: /${{ steps.prep.outputs.category }}/${{ matrix.container }}
        platforms: ${{ steps.prep.outputs.platform }}
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: |
          gitea.mds.name/mds/truenas/${{ matrix.container }}:latest
          gitea.mds.name/mds/truenas/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          gitea.mds.name/mds/truenas/${{ matrix.container }}:build${{ steps.time.outputs.time }}


    - name: Sign the images
      if: github.event_name != 'pull_request'
      run: |
         cosign sign gitea.mds.name/mds/truenas/${{ matrix.container }}@${{ steps.push.outputs.digest }} -y -a "repo=${{ github.repository }}" -a "workflow=${{ github.workflow }}" -a "ref=${{ github.sha }}"

    - name: Verify the pushed tags
      if: github.event_name != 'pull_request'
      run: |
         cosign verify gitea.mds.name/mds/truenas/${{ matrix.container }}@${{ steps.push.outputs.digest }} --certificate-oidc-issuer=https://token.actions.githubusercontent.com --certificate-identity=https://github.com/mdsina/truenas-charts/.github/workflows/containers.build.yaml@refs/heads/main

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      run: |
        syft "gitea.mds.name/mds/truenas/${{ matrix.container }}:v${{ steps.prep.outputs.version }}@${{ steps.push.outputs.digest }}" -o spdx-json=${{ matrix.container }}-sbom-spdx.json

    - name: Attach SBOM to image
      if: github.event_name != 'pull_request'
      run: |
        cosign attest --predicate ${{ matrix.container }}-sbom-spdx.json --type spdx "gitea.mds.name/mds/truenas/${{ matrix.container }}@${{ steps.push.outputs.digest }}" -y


    - name: Verify SBOM attestation
      if: github.event_name != 'pull_request'
      run: |
        cosign verify-attestation gitea.mds.name/mds/truenas/${{ matrix.container }}@${{ steps.push.outputs.digest }}  --type https://spdx.dev/Document --certificate-oidc-issuer=https://token.actions.githubusercontent.com --certificate-identity=https://github.com/mdsina/truenas-charts/.github/workflows/containers.build.yaml@refs/heads/main | jq '.payload |= @base64d | .payload | fromjson'

    - name: Generate provenance
      id: gen-prov
      if: github.event_name != 'pull_request'
      run: |
        wget https://github.com/slsa-framework/slsa-github-generator/releases/download/v1.5.0/slsa-generator-container-linux-amd64
        chmod +x slsa-generator-container-linux-amd64
        # Generate a predicate only.
        ./slsa-generator-container-linux-amd64 generate --predicate="${{ matrix.container }}-predicate.json"
      env:
        UNTRUSTED_IMAGE: "gitea.mds.name/mds/truenas/${{ matrix.container }}"
        UNTRUSTED_DIGEST: "${{ steps.push.outputs.digest }}"
        GITHUB_CONTEXT: "${{ toJSON(github) }}"

    - name: Sign provenance
      id: sign-prov
      if: github.event_name != 'pull_request'
      run: |
        cosign attest --predicate="${{ matrix.container }}-predicate.json" \
          --type slsaprovenance \
          --yes \
          "gitea.mds.name/mds/truenas/${{ matrix.container }}@${{ steps.push.outputs.digest }}"
      env:
        COSIGN_EXPERIMENTAL: 1

    - name: Verify provenance attestation
      if: github.event_name != 'pull_request'
      id: verf-prov
      run: |
        cosign verify-attestation gitea.mds.name/mds/truenas/${{ matrix.container }}@${{ steps.push.outputs.digest }} --type slsaprovenance --certificate-oidc-issuer=https://token.actions.githubusercontent.com --certificate-identity=https://github.com/mdsina/truenas-charts/.github/workflows/containers.build.yaml@refs/heads/main | jq '.payload |= @base64d | .payload | fromjson'
      env:
        COSIGN_EXPERIMENTAL: 1

  container-build-complete:
    needs: [build]
    name: Container Build Completed
    runs-on: ubuntu-latest
    steps:
      - name: complete message
        run: echo "Container Build and Tests Completed Successfully"

  automerge:
    needs: [container-build-complete]
    if: github.event_name == 'pull_request'
    name: Automerge build
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: pascalgn/automerge-action@22948e0bc22f0aa673800da838595a3e7347e584 # v0.15.6
        env:
          GITHUB_TOKEN: "${{ secrets.BOT_TOKEN }}"
          UPDATE_RETRIES: 12
          UPDATE_RETRY_SLEEP: 60000
